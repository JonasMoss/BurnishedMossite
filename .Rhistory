mu = 4
n = 1
R = 1/2
factor = Vectorize(function(u) {
integrand = function(mean) {
truncnorm::dtruncnorm(x = u_to_x(u, n = n),
mean = mean,
a = qnorm(alpha),
b = Inf)*
dexp(mean, theta0)
}
upper = dnorm(u_to_x(u, n))
lower = integrate(integrand, lower = 0, upper = Inf)$value
upper/lower
})
factor2 = Vectorize(function(u) {
integrand = function(mean)
dnorm(x = u_to_x(u, n = n), mean = mean)*dexp(mean, theta0)
upper = dnorm(u_to_x(u, n))
lower = integrate(integrand, lower = 0, upper = Inf)$value
upper/lower
})
u = seq(0, 1, by = 0.001)
plot(u, factor(u/20), lty = 2, type = "l", lwd = 2)
lines(u, factor2(u), col = "red", lwd = 2)
plot(u, factor(u/20)/factor2(u))
plot(u, factor2(u), col = "red", lwd = 2, type = "l")
plot(u_to_x(u, n), factor(u/20), lty = 2, type = "l", lwd = 2)
lines(u_to_x(u, n), factor2(u), col = "red", lwd = 2)
plot(u_to_x(u/20, n), factor(u/20), lty = 2, type = "l", lwd = 2)
lines(u_to_x(u, n), factor2(u), col = "red", lwd = 2)
plot(u_to_x(u, n), factor2(u), col = "red", lwd = 2)
lines(u_to_x(u/20, n), factor(u/20), lty = 2, type = "l", lwd = 2)
plot(u_to_x(u, n), factor2(u), col = "red", lwd = 2, type = "l")
lines(u_to_x(u/20, n), factor(u/20), lty = 2, type = "l", lwd = 2)
plot(u_to_x(u/20, n), factor(u/20), lty = 2, type = "l", lwd = 2)
lines(u_to_x(u, n), factor2(u), col = "red", lwd = 2, type = "l")
plot(u_to_x(u/20, n), factor(u/20), lty = 2, type = "l", lwd = 2)
lines(u_to_x(u/20, n), factor2(u/20), col = "red", lwd = 2, type = "l")
plot(u/20, factor(u/20), lty = 2, type = "l", lwd = 2)
lines(u, factor2(u), col = "red", lwd = 2, type = "l")
plot(u/20, factor(u/20), lty = 2, type = "l", lwd = 2)
lines(u/20, factor2(u/20), col = "red", lwd = 2, type = "l")
plot(u, factor(u/20), lty = 2, type = "l", lwd = 2)
lines(u, factor2(u), col = "red", lwd = 2, type = "l")
plot(u, factor(u/20), lty = 2, type = "l", lwd = 2)
lines(u, factor2(u), col = "red", lwd = 2, type = "l")
plot(u/20, factor(u/20), lty = 2, type = "l", lwd = 2)
lines(u/20, factor2(u/20), col = "red", lwd = 2, type = "l")
plot(u/20, factor(u/20)/factor2(u/20), col = "red", lwd = 2, type = "l")
u_to_x = function(u, n) -qnorm(u)/sqrt(n)
mu = 4
n = 1000
R = 1/2
factor = Vectorize(function(u) {
integrand = function(mean) {
truncnorm::dtruncnorm(x = u_to_x(u, n = n),
mean = mean,
a = qnorm(alpha),
b = Inf)*
dexp(mean, theta0)
}
upper = dnorm(u_to_x(u, n))
lower = integrate(integrand, lower = 0, upper = Inf)$value
upper/lower
})
factor2 = Vectorize(function(u) {
integrand = function(mean)
dnorm(x = u_to_x(u, n = n), mean = mean)*dexp(mean, theta0)
upper = dnorm(u_to_x(u, n))
lower = integrate(integrand, lower = 0, upper = Inf)$value
upper/lower
})
u = seq(0, 1, by = 0.001)
plot(u, factor(u/20), lty = 2, type = "l", lwd = 2)
lines(u, factor2(u), col = "red", lwd = 2)
plot(u, factor(u/20)/factor2(u))
plot(u, factor2(u), col = "red", lwd = 2, type = "l")
plot(u/20, factor(u/20), lty = 2, type = "l", lwd = 2)
lines(u/20, factor2(u/20), col = "red", lwd = 2, type = "l")
#lines(u_to_x(u/20, n), factor(u/20), lty = 2, type = "l", lwd = 2)
plot(u/20, factor(u/20)/factor2(u/20), col = "red", lwd = 2, type = "l")
plot(u/20, factor(u/20)/factor2(u/20), col = "red", lwd = 2, type = "l")
u_to_x = function(u, n) -qnorm(u)/sqrt(n)
mu = 4
n = 1000
R = 1/2
factor = Vectorize(function(u) {
integrand = function(mean) {
truncnorm::dtruncnorm(x = u_to_x(u, n = n),
mean = mean,
a = qnorm(alpha),
b = Inf)*
dexp(mean, theta0)
}
upper = dnorm(u_to_x(u, n))
lower = integrate(integrand, lower = 0, upper = Inf)$value
upper/lower
})
factor2 = Vectorize(function(u) {
integrand = function(mean)
dnorm(x = u_to_x(u, n = n), mean = mean)*dexp(mean, theta0)
upper = dnorm(u_to_x(u, n))
lower = integrate(integrand, lower = 0, upper = Inf)$value
upper/lower
})
u = seq(0, 1, by = 0.001)
plot(u, factor(u/20), lty = 2, type = "l", lwd = 2)
lines(u, factor2(u), col = "red", lwd = 2)
plot(u, factor(u/20)/factor2(u))
plot(u, factor2(u), col = "red", lwd = 2, type = "l")
plot(u/20, factor(u/20), lty = 2, type = "l", lwd = 2)
lines(u/20, factor2(u/20), col = "red", lwd = 2, type = "l")
#lines(u_to_x(u/20, n), factor(u/20), lty = 2, type = "l", lwd = 2)
plot(u/20, factor(u/20)/factor2(u/20), col = "red", lwd = 2, type = "l")
pH0 = function(u) 1/(1 + R*exp(n*mu*(u_to_x(u, n) - 1/2*mu)))
plot(u, pH0(u))
plot(u, log(dnorm(u_to_x(u, n))/dnorm(u_to_x(u, n), mean = 1)))
plot(u, u)
lines(u, u/(20 - 19*u))
fun = function(u, pi = 0.5, alpha = 0.05) {
u*((1 - pi) + pi/alpha)(u <= alpha)
pi + (1 - pi)*u*(u > alpha)
}
fun = function(u, pi = 0.5, alpha = 0.05) {
u*((1 - pi) + pi/alpha)(u <= alpha)
pi + (1 - pi)*u*(u > alpha)
}
plot(u, fun(u))
fun = function(u, pi = 0.5, alpha = 0.05) {
u*((1 - pi) + pi/alpha)(u <= alpha)
pi + (1 - pi)*u*(u > alpha)
}
plot(u, fun(u))
fun = function(u, pi = 0.5, alpha = 0.05) {
u*((1 - pi) + pi/alpha)(u <= alpha)
pi + (1 - pi)*u*(u > alpha)
}
fun = function(u, pi = 0.5, alpha = 0.05) {
u*((1 - pi) + pi/alpha)*(u <= alpha)*pi + (1 - pi)*u*(u > alpha)
}
fun = function(u, pi = 0.5, alpha = 0.05)
u*((1 - pi) + pi/alpha)*(u <= alpha)*pi + (1 - pi)*u*(u > alpha)
fun = function(u, pi = 0.5, alpha = 0.05) {
u*((1 - pi) + pi/alpha)(u <= alpha)
pi + (1 - pi)*u*(u > alpha)
}
fun = function(u, pi = 0.5, alpha = 0.05) {
u*((1 - pi) + pi/alpha)(u <= alpha)
pi + (1 - pi)*u*(u > alpha)
}
plot(u, fun(u))
fun = function(u, pi = 0.5, alpha = 0.05)
u*((1 - pi) + pi/alpha)*(u <= alpha)*pi + (1 - pi)*u*(u > alpha)
plot(u, fun(u))
plot(u, fun(u))
fun = function(u, pi = 0.5, alpha = 0.05)
u*((1 - pi) + pi/alpha)*(u <= alpha)*(pi + (1 - pi)*u)*(u > alpha)
plot(u, fun(u))
fun = function(u, pi = 0.5, alpha = 0.05)
u*((1 - pi) + pi/alpha)*(u <= alpha) + (pi + (1 - pi)*u)*(u > alpha)
plot(u, fun(u))
plot(u, fun(u, pi = 0.1, alpha = .0027), type = "l")
lines(u, fun(u, pi = 0.4, alpha = .0027), type = "l", col = "blue")
lines(u, fun(u, pi = 0.9, alpha = .0027), type = "l", col = "red")
plot(u, fun(u, pi = 0.2, alpha = .0027), type = "l")
lines(u, fun(u, pi = 0.4, alpha = .0027), type = "l", col = "blue")
lines(u, fun(u, pi = 0.7, alpha = .0027), type = "l", col = "red")
plot(u, fun(u, pi = 0.2, alpha = .0027), type = "l", log = "x")
lines(u, fun(u, pi = 0.4, alpha = .0027), type = "l", col = "blue")
lines(u, fun(u, pi = 0.7, alpha = .0027), type = "l", col = "red")
lines(u, fun(u, pi = 0.7, alpha = .0027), type = "l", col = "red")
plot(u, fun(u, pi = 0.2, alpha = .0027), type = "l", log = "x")
lines(u, fun(u, pi = 0.4, alpha = .0027), type = "l", col = "blue")
lines(u, fun(u, pi = 0.7, alpha = .0027), type = "l", col = "red")
lines(u, fun(u, pi = 0.9, alpha = .05), type = "l", col = "purple", lwd = 2)
plot(u, fun(u, pi = 0.2, alpha = .005), type = "l", log = "x")
lines(u, fun(u, pi = 0.4, alpha = .005), type = "l", col = "blue")
lines(u, fun(u, pi = 0.7, alpha = .005), type = "l", col = "red")
lines(u, fun(u, pi = 0.9, alpha = .05), type = "l", col = "purple", lwd = 2)
plot(u, fun(0.05, pi = 0.2, alpha = .005), type = "l", log = "x")
plot(u, fun(0.05, pi = 0.2, alpha = u), type = "l", log = "x")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
f = function(...) ...[[1]]
f(c(1, 2, 3))
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
λ = function(call, quoted = FALSE) {
call = if(!quoted) substitute(call) else call
f = function(...) NULL
body(f) = call_replace(call)
environment(f) = parent.frame()
f
}
λ = function(call, quoted = FALSE) {
call = if(!quoted) substitute(call) else call
f = function(...) NULL
body(f) = call_replace(call)
environment(f) = parent.frame()
f
}
blogdown::serve_site()
L = function(call, quoted = FALSE) {
call = if(!quoted) substitute(call) else call
f = function(...) NULL
body(f) = call_replace(call)
environment(f) = parent.frame()
f
}
λ = L
blogdown::serve_site()
blogdown::serve_site()
set.seed(313)
x = rgamma(100, 2, 4)
nlm(f = function(p) -mean(dgamma(x, shape = p[1], shape = p[2], log = TRUE))),
set.seed(313)
x = rgamma(100, 2, 4)
nlm(f = function(p) -mean(dgamma(x, shape = p[1], shape = p[2], log = TRUE)),
p = c(1, 1))
set.seed(313)
x = rgamma(100, 2, 4)
nlm(f = function(p) -mean(dgamma(x, shape = p[1], rate = p[2], log = TRUE)),
p = c(1, 1))
set.seed(313)
x = rgamma(100, 2, 4)
nlm(f = function(p) -mean(dgamma(x, shape = p[1], rate = p[2], log = TRUE)),
p = c(1, 1))$estimate
call_replace = function(call) {
if(length(call) > 1) {
if(call[[1]] == quote(`?`))
if(is.numeric(call[[2]]))
return(parse(text = paste0("...[[", eval(call[[2]]), "]]"))[[1]])
new = as.call(lapply(1:length(call), function(i) call_replace(call[[i]])))
names(new) = names(call)
new
} else call
}
L = function(call, quoted = FALSE) {
call = if(!quoted) substitute(call) else call
f = function(...) NULL
body(f) = call_replace(call)
environment(f) = parent.frame()
f
}
set.seed(313)
x = rgamma(100, 2, 4)
nlm(f = function(p) -mean(dgamma(x, shape = p[1], rate = p[2], log = TRUE)),
p = c(1, 1))$estimate
set.seed(313)
x = rgamma(100, 2, 4)
nlm(f = function(p) -mean(dgamma(x, shape = p[1], rate = p[2], log = TRUE)),
p = c(1, 1))$estimate
call_replace = function(call) {
if(length(call) > 1) {
if(call[[1]] == quote(`?`))
if(is.numeric(call[[2]]))
return(parse(text = paste0("...[[", eval(call[[2]]), "]]"))[[1]])
new = as.call(lapply(1:length(call), function(i) call_replace(call[[i]])))
names(new) = names(call)
new
} else call
}
L = function(call, quoted = FALSE) {
call = if(!quoted) substitute(call) else call
f = function(...) NULL
body(f) = call_replace(call)
environment(f) = parent.frame()
f
}
rgamma(100, 2, 7) %>%
-mean(dgamma(shape = ?1, rate = ?2, log = TRUE)) %L>%
nlm(p = c(1, 1))
library("magrittr")
`%L>%` = function(lhs, rhs) {
lhs_call = call(name = "function",
quote(function(...) {})[[2]],
call_replace(substitute(lhs)))
rhs_call = substitute(rhs)
eval(call("%>%", lhs_call, rhs_call))
}
-mean(dgamma(x, shape = ?1, rate = ?2, log = TRUE)) %L>%
nlm(p = c(1, 1))
library("magrittr")
`%L>%` = function(lhs, rhs) {
lhs_call = call(name = "function",
quote(function(...) {})[[2]],
call_replace(substitute(lhs)))
rhs_call = substitute(rhs)
eval(call("%>%", lhs_call, rhs_call))
}
-mean(dgamma(x, shape = ?1, rate = ?2, log = TRUE)) %L>%
nlm(p = c(1, 1))$estimate
library("magrittr")
`%L>%` = function(lhs, rhs) {
lhs_call = call(name = "function",
quote(function(...) {})[[2]],
call_replace(substitute(lhs)))
rhs_call = substitute(rhs)
eval(call("%>%", lhs_call, rhs_call))
}
-mean(dgamma(x, shape = ?1, rate = ?2, log = TRUE)) %L>%
nlm(p = c(1, 1)) %$%
estimate
rgamma(100, 2, 7) %>%
-mean(dgamma(shape = ?1, rate = ?2, log = TRUE)) %L>%
nlm(p = c(1, 1))
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
?sample
n = sample(20:80, K, replace = TRUE)
K = 5
n = sample(20:80, K, replace = TRUE)
K = 5
n = sample(20:80, K, replace = TRUE)
theta = rnorm(K, 0.5, 1)
z = rnorm(K, sqrt(n)*theta, 1)
z
K = 10000
n = sample(20:80, K, replace = TRUE)
theta = rnorm(K, 0.5, 1)
z = rnorm(K, sqrt(n)*theta, 1)
z
mean(z^2)
z^2
var(z)
K = 2
n = sample(20:80, K, replace = TRUE)
theta = rnorm(K, 0.5, 1)
z = rnorm(K, sqrt(n)*theta, 1)
z
K = 2
n = sample(20:80, K, replace = TRUE)
theta = rnorm(K, 0.5, 1)
z = rnorm(K, sqrt(n)*theta, 1)
var(z)*(K-1)
Nreps = 10000
results = replicate(Nreps, {
K = 2
n = sample(20:80, K, replace = TRUE)
theta = rnorm(K, 0.5, 1)
z = rnorm(K, sqrt(n)*theta, 1)
var(z)*(K-1)
})
results
hist(results)
hist(results, breaks = 100)
hist(results, breaks = 100, freq = FALSE)
Nreps = 10000
results = replicate(Nreps, {
K = 2
n = sample(20:80, K, replace = TRUE)
theta = rnorm(K, 0.5, 1)
z = rnorm(K, sqrt(n)*theta, 1)
var(z)*(K-1)
})
hist(results, breaks = 100, freq = FALSE)
Nreps = 10000
results = replicate(Nreps, {
K = 2
n = sample(20:80, K, replace = TRUE)
theta = rnorm(K, 0.5, 1)
z = rnorm(K, sqrt(n)*theta, 1)
var(z)*(K-1)
})
x = seq(0, max(results), by = 0.5)
hist(results, breaks = 100, freq = FALSE)
lines(x, dchisq(x, 2))
Nreps = 10000
results = replicate(Nreps, {
K = 2
n = sample(20:80, K, replace = TRUE)
theta = rnorm(K, 0.5, 1)
theta = 0
z = rnorm(K, sqrt(n)*theta, 1)
var(z)*(K-1)
})
x = seq(0, max(results), by = 0.5)
hist(results, breaks = 100, freq = FALSE)
lines(x, dchisq(x, 2))
Nreps = 10000
results = replicate(Nreps, {
K = 2
n = sample(20:80, K, replace = TRUE)
theta = rnorm(K, 0.5, 1)
theta = 0
z = rnorm(K, sqrt(n)*theta, 1)
var(z)*K
})
x = seq(0, max(results), by = 0.5)
hist(results, breaks = 100, freq = FALSE)
lines(x, dchisq(x, 2))
Nreps = 10000
results = replicate(Nreps, {
K = 2
n = sample(20:80, K, replace = TRUE)
theta = rnorm(K, 0.5, 1)
theta = 0
z = rnorm(K, sqrt(n)*theta, 1)
var(z)*(K-1)
})
x = seq(0, max(results), by = 0.5)
hist(results, breaks = 100, freq = FALSE)
lines(x, dchisq(x, 2))
Nreps = 10000
results = replicate(Nreps, {
K = 2
n = sample(20:80, K, replace = TRUE)
theta = rnorm(K, 0.5, 1)
theta = 0
z = rnorm(K, sqrt(n)*theta, 1)
var(z)*(K-1)
})
x = seq(0, max(results), by = 0.5)
hist(results, breaks = 100, freq = FALSE)
lines(x, dchisq(x, 2))
Nreps = 10000
results = replicate(Nreps, {
K = 2
n = sample(20:80, K, replace = TRUE)
theta = rnorm(K, 0.5, 1)
theta = 0
z = rnorm(K, sqrt(n)*theta, 1)
var(z)*(K-1)
})
x = seq(0, max(results), by = 0.5)
hist(results, breaks = 100, freq = FALSE)
lines(x, dchisq(x, K - 1))
Nreps = 10000
results = replicate(Nreps, {
K = 2
n = sample(20:80, K, replace = TRUE)
theta = rnorm(K, 0.5, 1)
theta = 0
z = rnorm(K, sqrt(n)*theta, 1)
var(z)*(K-1)
})
x = seq(0, max(results), by = 0.01)
hist(results, breaks = 100, freq = FALSE)
lines(x, dchisq(x, K - 1))
Nreps = 10000
results = replicate(Nreps, {
K = 2
n = sample(20:80, K, replace = TRUE)
theta = rnorm(K, -0.5, 1)
theta = 0
z = rnorm(K, sqrt(n)*theta, 1)
var(z)*(K-1)
})
x = seq(0, max(results), by = 0.01)
hist(results, breaks = 100, freq = FALSE)
lines(x, dchisq(x, K - 1))
Nreps = 10000
results = replicate(Nreps, {
K = 2
n = sample(20:80, K, replace = TRUE)
theta = rnorm(K, 0.5, 1)
theta = 0
z = rnorm(K, sqrt(n)*theta, 1)
var(z)*(K-1)
})
x = seq(0, max(results), by = 0.01)
hist(results, breaks = 100, freq = FALSE)
lines(x, dchisq(x, K - 1))
Nreps = 10000
results = replicate(Nreps, {
K = 2
n = sample(20:80, K, replace = TRUE)
theta = rnorm(K, 0.5, 1)
#theta = 0
z = rnorm(K, sqrt(n)*theta, 1)
var(z)*(K-1)
})
x = seq(0, max(results), by = 0.01)
hist(results, breaks = 100, freq = FALSE)
lines(x, dchisq(x, K - 1))
Nreps = 10000
results = replicate(Nreps, {
K = 2
n = sample(20:80, K, replace = TRUE)
theta = rnorm(K, 0, 1)
#theta = 0
z = rnorm(K, sqrt(n)*theta, 1)
var(z)*(K-1)
})
x = seq(0, max(results), by = 0.01)
hist(results, breaks = 100, freq = FALSE)
lines(x, dchisq(x, K - 1))
7.55/0.04
11.92/(7.55/0.04)
1.96/sqrt(10)
11.92/sqrt(10)
11.92/sqrt(50)
